import Foundation


/// Response status from Visenze API. See http://developers.visenze.com/api/?shell#api-response for more details
public enum ViRequestStatus: String {
    case OK = "OK"
    case warning  = "warning"
    case fail = "fail"
    
    var description: String { return self.rawValue }

}


/// API response. See http://developers.visenze.com/api/?shell#api-response for more details
open class ViResponseData: NSObject {
    
    //MARK: ViSenze API data
    
    /// the request status : OK, warning or fail
    public var status: String = ""
    
    /// whether API return error i.e. status is not OK
    public var hasError : Bool {
        return (status != ViRequestStatus.OK.rawValue )
    }
    
    /// request method
    public var method: String?
    
    /// only applicable for Recommendations endpoint
    public var algorithm: String?
    
    /// the unique ID for uploaded image, only visible for uploadsearch / Search By Image API.
    public var im_id: String?
    
    /// The list of result objects if the request was successful i.e. when status is “OK”.
    public var result: [ViImageResult] = []
    
    /// for automatic object detection. See http://developers.visenze.com/api/?shell#automatic-object-recognition-beta for details
    public var productTypes: [ViProductType] = []
    
    ///  for automatic object detection. See http://developers.visenze.com/api/?shell#automatic-object-recognition-beta for details
    public var productTypeList : [ViProductTypeList] = []
    
    /// for discoverSearch only. Object types list
    public var objectTypeList : [ViProductTypeList] = []
    
    /// for discoverSearch only. Objects in search result
    public var objects: [ViObjectResult] = []
    
    /// for discoverSearch only
    public var resultLimit : Int?
    
    /// for discoverSearch only
    public var detectionLimit : Int?
    
    /// facet results. Refer to http://developers.visenze.com/api/index.php#facet-and-filtering for details
    public var facets : [ViFacet] = []
    
    /// store list of error messages if request is not successful
    public var error: [String] = []
    
    /// result page number
    public var page: Int = -1
    
    /// The number of results per page.
    public var limit: Int = -1
    
    /// totol number of results
    public var total: Int = -1
    
    /// request id generated by ViSenze server
    public var reqId: String?
    
    public var excludedImNames: [String] = []
    
    
    /// MARK: initializer
    public init(response: URLResponse, data: Data) {
        do{
            let json = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as! Dictionary<String, Any>
            
            reqId = json["reqid"] as? String
            status = json["status"] as! String
            method = json["method"] as? String
            im_id  = json["im_id"] as? String
            algorithm = json["algorithm"] as? String
            
            if let errorArr = json["error"] as? [String] {
                self.error = errorArr
            }
            
            if let page = json["page"] as? Int {
                self.page = page
            }
            
            if let limit = json["limit"] as? Int {
                self.limit = limit
            }
            
            if let total = json["total"] as? Int {
                self.total = total
            }
            
            if let result = json["result"] as? [Any] {
                self.result = ViResponseData.parseResults(result)
            }
            
            if let excludedImNameList = json["excluded_im_names"] as? [String] {
                self.excludedImNames = excludedImNameList
            }
            
            // extract product types, product types list if necessary
            if let pTypesJson = json["product_types"] as? [Any] {
                self.productTypes = ViResponseData.parseProductTypes(pTypesJson)
            }
            
            if let pTypeListJson = json["product_types_list"] as? [Any] {
                self.productTypeList = ViResponseData.parseProductTypeList(pTypeListJson)
            }
            
            if let facetListJson = json["facets"] as? [Any] {
                self.facets = ViResponseData.parseFacets(facetListJson)
            }
            
            // discover search response
            if let objectTypeListJson = json["object_types_list"] as? [Any] {
                self.objectTypeList = ViResponseData.parseProductTypeList(objectTypeListJson)
            }
            
            if let objectsJson = json["objects"] as? [Any] {
                self.objects = ViResponseData.parseObjectResults(objectsJson)
            }
            
            if let resultLimit = json["result_limit"] as? Int {
                self.resultLimit = resultLimit
            }
            
            if let detectionLimit = json["detection_limit"] as? Int {
                self.detectionLimit = detectionLimit
            }

        }
        catch {
            print("\(type(of: self)).\(#function)[line:\(#line)] - error: Json response might be invalid. Error during processing:")
            print ("\(error)\n")
        }

    }
    
    // MARK: parsing json methods
    public static func parseProductTypes(_ arr: [Any]) -> [ViProductType]{
        var results = [ViProductType]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let type = dict["type"] as! String
                let score = parseFloat(dict, "score")
                
                let boxArr = dict["box"] as! [Int]
                let box = ViBox(x1: boxArr[0], y1: boxArr[1], x2: boxArr[2], y2: boxArr[3])
                let item = ViProductType(box: box, score: score, type: type)
                item.attributes = dict["attributes"] as! [String: Any]
                results.append(item)
            }
        }
        
        return results
    }
    
    public static func parseProductTypeList(_ arr: [Any]) -> [ViProductTypeList]{
        var results = [ViProductTypeList]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let type = dict["type"] as! String
                let item = ViProductTypeList(type: type)
                item.attributes_list = dict["attributes_list"] as! [String: Any]
                results.append(item)
            }
        }
        
        return results
    }
    
    public static func parseFacets(_ arr: [Any]) -> [ViFacet]{
        var results = [ViFacet]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let key = dict["key"] as! String
                let item = ViFacet(key: key)
                
                // string facet
                if let itemArr = dict["items"] as? [Any] {
                    var facetItems : [ViFacetItem] = []
                    for itemDict in itemArr {
                        
                        if let itemDict = itemDict as? [String:Any] {
                            let val = itemDict["value"] as! String
                            let count = itemDict["count"] as? Int
                            let facetItem = ViFacetItem(value: val, count: count)
                            facetItems.append(facetItem)
                        }
                    }
                    item.items = facetItems
                }
                
                // numeric facet
                if let range = dict["range"] as? [String: String] {
                    // extract min and max
                    item.min = Int(range["min"]!)
                    item.max = Int(range["max"]!)
                }
                
                results.append(item)
            }
        }
        
        return results
    }
    
    // generate image results from the json array
    public static func parseResults(_ arr: [Any]) -> [ViImageResult]{
        var results = [ViImageResult]()
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let im_name = dict["im_name"] as! String
                
                if let item = ViImageResult(im_name) {
                    item.score = parseFloat(dict, "score")
                    
                    item.metadataDict = dict["value_map"] as? [String: Any]
                    
                    if (item.metadataDict != nil) {
                        item.im_url = item.metadataDict?["im_url"] as? String
                    }
                    
                    item.tags = dict["tags"] as? [String: Any]
                    
                    item.pinned = dict["pinned"] as? Bool
                    
                    if let alternatives = dict["alternatives"] as? [Any] {
                        item.alternatives = ViResponseData.parseResults(alternatives)
                    }
                    
                    results.append(item)
                }
                else{
                    print("im_name is missing in json result")
                }
            }
        }
        
        return results
    }
    
    public static func parseObjectResults(_ arr: [Any]) -> [ViObjectResult]{
        var results = [ViObjectResult]()
        
        for jsonItem in arr {
            if let dict = jsonItem as? [String:Any] {
                let type = dict["type"] as! String
                let item = ViObjectResult(type: type)
                item.attributes = dict["attributes"] as! [String: Any]
                
                item.score = parseFloat(dict, "score")
                
                if let boxArr = dict["box"] as? [Int] {
                    if boxArr.count > 3 {
                        item.box = ViBox(x1: boxArr[0], y1: boxArr[1], x2: boxArr[2], y2: boxArr[3])
                    }
                }
                
                if let pointArr = dict["point"] as? [Int] {
                    if pointArr.count > 1 {
                        item.point = ViPoint(x: pointArr[0], y: pointArr[1])
                    }
                }
                
                item.total = dict["total"] as! Int
                
                if let result = dict["result"] as? [Any] {
                    item.result = ViResponseData.parseResults(result)
                }
                
                if let facetListJson = dict["facets"] as? [Any] {
                    item.facets = ViResponseData.parseFacets(facetListJson)
                }
                
                results.append(item)
            }
        }
        
        return results
    }
    
    
    private static func parseFloat(_ dict:  [String:Any], _ field: String) -> Float{
      
        if let floatScore = dict[field] as? Float {
            return floatScore
        }
        
        if let numScore = dict[field] as? NSNumber {
            return numScore.floatValue
        }
        
        if let intScore = dict[field] as? Int {
           return Float(intScore)
        }
        
        if let floatVal = Float(String(describing: dict[field]) ) {
            return floatVal
        }
        
        return 0
    }

}
